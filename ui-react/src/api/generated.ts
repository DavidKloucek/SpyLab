/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * SpyLab
 * OpenAPI spec version: 0.1.0
 */
export interface AnalyzeBox {
  x: number;
  y: number;
  w: number;
  h: number;
  face_confidence: number;
  similar_faces: number;
}

export interface BodyAnalyzeImageApiAnalyzePost {
  file: Blob;
}

export interface BodyFindSimilarImageApiSimilarToImagePost {
  image: Blob;
  x: number;
  y: number;
  w: number;
  h: number;
}

export interface DashStats {
  face_count_total: number;
  face_count_24h: number;
  user_count_total: number;
}

export interface DetailData {
  data: FaceItemResponse;
  faces: FaceItemResponse[];
}

export interface FaceItemResponse {
  /** */
  id: number;
  fn: string;
  model: string;
  confidence: number;
  preview_path: string;
  source_filepath: string;
  x: number;
  y: number;
  w: number;
  h: number;
  preview_url: string;
  source_url: string;
}

export interface FaceSimilarItemResponse {
  /** */
  id: number;
  fn: string;
  model: string;
  confidence: number;
  preview_path: string;
  source_filepath: string;
  x: number;
  y: number;
  w: number;
  h: number;
  is_same: boolean;
  distance: number;
  preview_url: string;
  source_url: string;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface UploadImageResponse {
  preview_url: string;
  source_url: string;
  boxes: AnalyzeBox[];
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type DetailImageApiDetailGetParams = {
  id: number;
};

export type ReadRandomApiListGetParams = {
  search?: string;
  limit?: number;
};

export type FindSimilarIdApiSimilarToIdGetParams = {
  id: number;
  model: string;
  metric?: string;
};

export type UserListApiUsersGetParams = {
  _start?: number;
  _end?: number;
};

/**
 * @summary Detail Image
 */
export type detailImageApiDetailGetResponse200 = {
  data: DetailData;
  status: 200;
};

export type detailImageApiDetailGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type detailImageApiDetailGetResponseComposite =
  | detailImageApiDetailGetResponse200
  | detailImageApiDetailGetResponse422;

export type detailImageApiDetailGetResponse =
  detailImageApiDetailGetResponseComposite & {
    headers: Headers;
  };

export const getDetailImageApiDetailGetUrl = (
  params: DetailImageApiDetailGetParams
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/detail?${stringifiedParams}`
    : `/api/detail`;
};

export const detailImageApiDetailGet = async (
  params: DetailImageApiDetailGetParams,
  options?: RequestInit
): Promise<detailImageApiDetailGetResponse> => {
  const res = await fetch(getDetailImageApiDetailGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: detailImageApiDetailGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as detailImageApiDetailGetResponse;
};

/**
 * @summary Read Random
 */
export type readRandomApiListGetResponse200 = {
  data: FaceItemResponse[];
  status: 200;
};

export type readRandomApiListGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type readRandomApiListGetResponseComposite =
  | readRandomApiListGetResponse200
  | readRandomApiListGetResponse422;

export type readRandomApiListGetResponse =
  readRandomApiListGetResponseComposite & {
    headers: Headers;
  };

export const getReadRandomApiListGetUrl = (
  params?: ReadRandomApiListGetParams
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/list?${stringifiedParams}`
    : `/api/list`;
};

export const readRandomApiListGet = async (
  params?: ReadRandomApiListGetParams,
  options?: RequestInit
): Promise<readRandomApiListGetResponse> => {
  const res = await fetch(getReadRandomApiListGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: readRandomApiListGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as readRandomApiListGetResponse;
};

/**
 * @summary Analyze Image
 */
export type analyzeImageApiAnalyzePostResponse200 = {
  data: UploadImageResponse;
  status: 200;
};

export type analyzeImageApiAnalyzePostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type analyzeImageApiAnalyzePostResponseComposite =
  | analyzeImageApiAnalyzePostResponse200
  | analyzeImageApiAnalyzePostResponse422;

export type analyzeImageApiAnalyzePostResponse =
  analyzeImageApiAnalyzePostResponseComposite & {
    headers: Headers;
  };

export const getAnalyzeImageApiAnalyzePostUrl = () => {
  return `/api/analyze`;
};

export const analyzeImageApiAnalyzePost = async (
  bodyAnalyzeImageApiAnalyzePost: BodyAnalyzeImageApiAnalyzePost,
  options?: RequestInit
): Promise<analyzeImageApiAnalyzePostResponse> => {
  const formData = new FormData();
  formData.append(`file`, bodyAnalyzeImageApiAnalyzePost.file);

  const res = await fetch(getAnalyzeImageApiAnalyzePostUrl(), {
    ...options,
    method: "POST",
    body: formData,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: analyzeImageApiAnalyzePostResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as analyzeImageApiAnalyzePostResponse;
};

/**
 * @summary Find Similar Id
 */
export type findSimilarIdApiSimilarToIdGetResponse200 = {
  data: FaceSimilarItemResponse[];
  status: 200;
};

export type findSimilarIdApiSimilarToIdGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type findSimilarIdApiSimilarToIdGetResponseComposite =
  | findSimilarIdApiSimilarToIdGetResponse200
  | findSimilarIdApiSimilarToIdGetResponse422;

export type findSimilarIdApiSimilarToIdGetResponse =
  findSimilarIdApiSimilarToIdGetResponseComposite & {
    headers: Headers;
  };

export const getFindSimilarIdApiSimilarToIdGetUrl = (
  params: FindSimilarIdApiSimilarToIdGetParams
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/similar-to-id?${stringifiedParams}`
    : `/api/similar-to-id`;
};

export const findSimilarIdApiSimilarToIdGet = async (
  params: FindSimilarIdApiSimilarToIdGetParams,
  options?: RequestInit
): Promise<findSimilarIdApiSimilarToIdGetResponse> => {
  const res = await fetch(getFindSimilarIdApiSimilarToIdGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: findSimilarIdApiSimilarToIdGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as findSimilarIdApiSimilarToIdGetResponse;
};

/**
 * @summary Find Similar Image
 */
export type findSimilarImageApiSimilarToImagePostResponse200 = {
  data: FaceSimilarItemResponse[];
  status: 200;
};

export type findSimilarImageApiSimilarToImagePostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type findSimilarImageApiSimilarToImagePostResponseComposite =
  | findSimilarImageApiSimilarToImagePostResponse200
  | findSimilarImageApiSimilarToImagePostResponse422;

export type findSimilarImageApiSimilarToImagePostResponse =
  findSimilarImageApiSimilarToImagePostResponseComposite & {
    headers: Headers;
  };

export const getFindSimilarImageApiSimilarToImagePostUrl = () => {
  return `/api/similar-to-image`;
};

export const findSimilarImageApiSimilarToImagePost = async (
  bodyFindSimilarImageApiSimilarToImagePost: BodyFindSimilarImageApiSimilarToImagePost,
  options?: RequestInit
): Promise<findSimilarImageApiSimilarToImagePostResponse> => {
  const formData = new FormData();
  formData.append(`image`, bodyFindSimilarImageApiSimilarToImagePost.image);
  formData.append(`x`, bodyFindSimilarImageApiSimilarToImagePost.x.toString());
  formData.append(`y`, bodyFindSimilarImageApiSimilarToImagePost.y.toString());
  formData.append(`w`, bodyFindSimilarImageApiSimilarToImagePost.w.toString());
  formData.append(`h`, bodyFindSimilarImageApiSimilarToImagePost.h.toString());

  const res = await fetch(getFindSimilarImageApiSimilarToImagePostUrl(), {
    ...options,
    method: "POST",
    body: formData,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: findSimilarImageApiSimilarToImagePostResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as findSimilarImageApiSimilarToImagePostResponse;
};

/**
 * @summary Dashboard
 */
export type dashboardApiDashboardGetResponse200 = {
  data: DashStats;
  status: 200;
};

export type dashboardApiDashboardGetResponseComposite =
  dashboardApiDashboardGetResponse200;

export type dashboardApiDashboardGetResponse =
  dashboardApiDashboardGetResponseComposite & {
    headers: Headers;
  };

export const getDashboardApiDashboardGetUrl = () => {
  return `/api/dashboard`;
};

export const dashboardApiDashboardGet = async (
  options?: RequestInit
): Promise<dashboardApiDashboardGetResponse> => {
  const res = await fetch(getDashboardApiDashboardGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardApiDashboardGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardApiDashboardGetResponse;
};

/**
 * @summary User List
 */
export type userListApiUsersGetResponse200 = {
  data: unknown[];
  status: 200;
};

export type userListApiUsersGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type userListApiUsersGetResponseComposite =
  | userListApiUsersGetResponse200
  | userListApiUsersGetResponse422;

export type userListApiUsersGetResponse =
  userListApiUsersGetResponseComposite & {
    headers: Headers;
  };

export const getUserListApiUsersGetUrl = (
  params?: UserListApiUsersGetParams
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/users?${stringifiedParams}`
    : `/api/users`;
};

export const userListApiUsersGet = async (
  params?: UserListApiUsersGetParams,
  options?: RequestInit
): Promise<userListApiUsersGetResponse> => {
  const res = await fetch(getUserListApiUsersGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: userListApiUsersGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as userListApiUsersGetResponse;
};

/**
 * @summary Handle Http Get
 */
export type handleHttpGetGraphqlGetResponse200 = {
  data: unknown;
  status: 200;
};

export type handleHttpGetGraphqlGetResponse404 = {
  data: null;
  status: 404;
};

export type handleHttpGetGraphqlGetResponseComposite =
  | handleHttpGetGraphqlGetResponse200
  | handleHttpGetGraphqlGetResponse404;

export type handleHttpGetGraphqlGetResponse =
  handleHttpGetGraphqlGetResponseComposite & {
    headers: Headers;
  };

export const getHandleHttpGetGraphqlGetUrl = () => {
  return `/graphql`;
};

export const handleHttpGetGraphqlGet = async (
  options?: RequestInit
): Promise<handleHttpGetGraphqlGetResponse> => {
  const res = await fetch(getHandleHttpGetGraphqlGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: handleHttpGetGraphqlGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as handleHttpGetGraphqlGetResponse;
};

/**
 * @summary Handle Http Post
 */
export type handleHttpPostGraphqlPostResponse200 = {
  data: unknown;
  status: 200;
};

export type handleHttpPostGraphqlPostResponseComposite =
  handleHttpPostGraphqlPostResponse200;

export type handleHttpPostGraphqlPostResponse =
  handleHttpPostGraphqlPostResponseComposite & {
    headers: Headers;
  };

export const getHandleHttpPostGraphqlPostUrl = () => {
  return `/graphql`;
};

export const handleHttpPostGraphqlPost = async (
  options?: RequestInit
): Promise<handleHttpPostGraphqlPostResponse> => {
  const res = await fetch(getHandleHttpPostGraphqlPostUrl(), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: handleHttpPostGraphqlPostResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as handleHttpPostGraphqlPostResponse;
};
